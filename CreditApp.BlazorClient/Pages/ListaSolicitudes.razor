@page "/lista-solicitudes"
@inject SolicitudCreditoViewModel ViewModel

<h3 class="mt-4 mb-3 text-center">Listado de Solicitudes de Crédito</h3>

<div class="row mb-3">
    <div class="col-12 col-md-4">
        <label for="itemsPerPage" class="form-label">Mostrar:</label>
        <select class="form-select" id="itemsPerPage" @onchange="ChangeItemsPerPage">
            <option value="5">5 registros</option>
            <option value="10">10 registros</option>
            <option value="20">20 registros</option>
        </select>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-bordered table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>
                    Id<br />
                    <input class="form-control form-control-sm" @bind="filters.Id" @bind:event="oninput" />
                </th>
                <th>
                    Nombre Cliente<br />
                    <input class="form-control form-control-sm" @bind="filters.NombreCliente" @bind:event="oninput" />
                </th>
                <th>
                    Monto<br />
                    <input class="form-control form-control-sm" @bind="filters.Monto" @bind:event="oninput" />
                </th>
                <th>
                    Estado<br />
                    <input class="form-control form-control-sm" @bind="filters.Estado" @bind:event="oninput" />
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in PagedSolicitudes)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.NombreCliente</td>
                    <td>@item.Monto</td>
                    <td>@item.Estado</td>
                </tr>
            }

            @for (int i = 0; i < EmptyRows; i++)
            {
                <tr>
                    <td colspan="4">&nbsp;</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="d-flex justify-content-between align-items-center">
    <div>
        Página @CurrentPage de @TotalPages
    </div>
    <div>
        <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@IsFirstPage">Anterior</button>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage">Siguiente</button>
    </div>
</div>

@code {
    private int CurrentPage = 1;
    private int ItemsPerPage = 5;

    private readonly FilterModel filters = new();

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadSolicitudesAsync();
    }

    private IEnumerable<SolicitudCredito> FilteredSolicitudes =>
        ViewModel.Solicitudes.Where(s =>
            (string.IsNullOrWhiteSpace(filters.NombreCliente) || s.NombreCliente.Contains(filters.NombreCliente, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrWhiteSpace(filters.Estado) || s.Estado.Contains(filters.Estado, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrWhiteSpace(filters.Monto) || s.Monto.ToString().Contains(filters.Monto)) &&
            (string.IsNullOrWhiteSpace(filters.Id) || s.Id.ToString().Contains(filters.Id)));

    private IEnumerable<SolicitudCredito> PagedSolicitudes =>
        FilteredSolicitudes
            .Skip((CurrentPage - 1) * ItemsPerPage)
            .Take(ItemsPerPage);

    private int TotalPages => (int)Math.Ceiling((double)FilteredSolicitudes.Count() / ItemsPerPage);
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private int EmptyRows => Math.Max(0, ItemsPerPage - PagedSolicitudes.Count());

    private void NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
        }
    }

    private void ChangeItemsPerPage(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var value))
        {
            ItemsPerPage = value;
            CurrentPage = 1;
        }
    }

    private class FilterModel
    {
        public string? Id { get; set; }
        public string? NombreCliente { get; set; }
        public string? Monto { get; set; }
        public string? Estado { get; set; }
    }
}
